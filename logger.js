// Generated by CoffeeScript 1.3.3

/*
@author: blackbing@gmail.com
*/


(function() {
  var DebugMode, Logger, i, j, logLevel, lv;

  DebugMode = (function() {
    /*
      you can insert your flow to check how to decide if it is in DebugMode
      If it is, return true
    */

    var cookie;
    cookie = document.cookie;
    if (cookie.indexOf('debug') >= 0) {
      return true;
    } else {
      return false;
    }
  })();

  (function(b) {
    var a, c, d;
    c = function() {};
    d = "assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(",");
    while (a = d.pop()) {
      b[a] = b[a] || c;
    }
  })(window.console = window.console || {});

  if (!DebugMode) {
    for (j in console) {
      if (typeof console[j] === 'function') {
        console[j] = function() {
          return true;
        };
      }
    }
  }

  Logger = function(s) {
    return Logger.log.apply(console, arguments);
  };

  logLevel = ['log', 'warn', 'info', 'dir', 'debug'];

  for (i in logLevel) {
    lv = logLevel[i];
    Logger[lv] = (function(lv) {
      if (DebugMode) {
        return function() {
          var caller;
          caller = arguments.callee.caller;
          if (window.console != null) {
            if (arguments.length < 2 || typeof arguments[0] !== 'string') {
              throw new Error('the first arguments need to be a meaningful string');
            }
            if (console[lv] != null) {
              arguments[0] = "[" + arguments[0] + "]:";
              if (!(console[lv].apply != null)) {
                Function.apply.apply(console[lv], [console, arguments]);
              } else {
                console[lv].apply(console, arguments);
              }
            } else {
              throw new Error("console." + lv + " is undefined.");
            }
            return true;
          } else {
            return false;
          }
        };
      } else {
        return function() {
          return true;
        };
      }
    })(lv);
  }

  Logger["enabled"] = DebugMode;

  window.Logger = Logger;

}).call(this);
